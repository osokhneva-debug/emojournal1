#!/usr/bin/env python3
"""
EmoJournal Telegram Bot - Main Application
Emotion tracking bot with random scheduling and weekly analytics
"""

import logging
import os
import asyncio
import json
from datetime import datetime, timezone
from typing import Optional, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from telegram.error import TelegramError

from .db import Database, User, Entry
from .scheduler import RandomScheduler
from .i18n import Texts
from .analysis import WeeklyAnalyzer

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EmoJournalBot:
    def __init__(self):
        self.db = Database()
        self.scheduler = RandomScheduler(self.db)
        self.texts = Texts()
        self.analyzer = WeeklyAnalyzer(self.db)
        
        # Environment validation
        self.bot_token = self._get_env_var('TELEGRAM_BOT_TOKEN')
        self.webhook_url = self._get_env_var('WEBHOOK_URL')
        self.port = int(os.getenv('PORT', '10000'))
        
        # Rate limiting storage (simple in-memory)
        self.rate_limits: Dict[int, datetime] = {}
        
        # User states for multi-step conversations (simplified in-memory storage)
        self.user_states: Dict[int, Dict[str, Any]] = {}
        
    def _get_env_var(self, name: str) -> str:
        value = os.getenv(name)
        if not value:
            logger.error(f"Required environment variable {name} not set")
            raise ValueError(f"Environment variable {name} is required")
        return value
    
    def _check_rate_limit(self, user_id: int) -> bool:
        """Simple rate limiting: 1 command per 2 seconds"""
        now = datetime.now(timezone.utc)
        if user_id in self.rate_limits:
            if (now - self.rate_limits[user_id]).total_seconds() < 2:
                return False
        self.rate_limits[user_id] = now
        return True
    
    def _set_user_state(self, user_id: int, state: str, data: Dict[str, Any] = None):
        """Set user conversation state"""
        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        self.user_states[user_id]['state'] = state
        if data:
            self.user_states[user_id].update(data)
    
    def _get_user_state(self, user_id: int) -> Dict[str, Any]:
        """Get user conversation state"""
        return self.user_states.get(user_id, {})
    
    def _clear_user_state(self, user_id: int):
        """Clear user conversation state"""
        if user_id in self.user_states:
            del self.user_states[user_id]
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command with onboarding"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # Clear any existing state
        self._clear_user_state(user_id)
        
        # Create or get user
        user = self.db.get_user(user_id)
        if not user:
            user = self.db.create_user(user_id, chat_id)
            # Start daily scheduling for new user
            await self.scheduler.start_user_schedule(user_id)
        
        # Set bot commands menu
        commands = [
            BotCommand("start", "üé≠ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("note", "üìù –ó–∞–ø–∏—Å–∞—Ç—å —ç–º–æ—Ü–∏—é —Å–µ–π—á–∞—Å"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
            BotCommand("summary", "üìä –°–≤–æ–¥–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"),
            BotCommand("export", "üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"),
            BotCommand("timezone", "üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"),
            BotCommand("pause", "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            BotCommand("resume", "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            BotCommand("stats", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"),
            BotCommand("delete_me", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
        ]
        
        await context.bot.set_my_commands(commands)
        
        await update.message.reply_text(
            self.texts.ONBOARDING,
            parse_mode='HTML'
        )
    
    async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /note command for manual emotion entry"""
        if not self._check_rate_limit(update.effective_user.id):
            return
        
        user_id = update.effective_user.id
        self._clear_user_state(user_id)
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∏–¥–µ–∏ —ç–º–æ—Ü–∏–π", callback_data="show_emotions")],
            [InlineKeyboardButton("–ù–∞–ø–∏—à—É —Å–∞–º(–∞)", callback_data="other_emotion")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìù –ó–∞–ø–∏—Å–∞—Ç—å —ç–º–æ—Ü–∏—é —Å–µ–π—á–∞—Å\n\n" + self.texts.EMOTION_QUESTION,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        await update.message.reply_text(
            self.texts.HELP,
            parse_mode='HTML'
        )
    
    async def timezone_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /timezone command"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        
        if context.args:
            tz_name = ' '.join(context.args)
            try:
                import zoneinfo
                zoneinfo.ZoneInfo(tz_name)  # Validate timezone
                self.db.update_user_timezone(user_id, tz_name)
                await update.message.reply_text(
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz_name}"
                )
                # Reschedule with new timezone
                await self.scheduler.start_user_schedule(user_id)
            except Exception:
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç IANA, –Ω–∞–ø—Ä–∏–º–µ—Ä: Europe/Moscow, Asia/Yekaterinburg"
                )
        else:
            user = self.db.get_user(user_id)
            current_tz = user.timezone if user else "Europe/Moscow"
            await update.message.reply_text(
                f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {current_tz}\n\n"
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /timezone Europe/Moscow"
            )
    
    async def summary_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /summary command"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        days = 7
        
        if context.args:
            try:
                days = int(context.args[0])
                days = max(1, min(days, 90))  # Limit to 1-90 days
            except ValueError:
                pass
        
        summary = await self.analyzer.generate_summary(user_id, days)
        await update.message.reply_text(summary, parse_mode='HTML')
    
    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /export command"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        csv_data = await self.analyzer.export_csv(user_id)
        
        if csv_data:
            import io
            csv_file = io.BytesIO(csv_data.encode('utf-8'))
            csv_file.name = f"emojournal_export_{datetime.now().strftime('%Y%m%d')}.csv"
            
            await update.message.reply_document(
                document=csv_file,
                caption="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
            )
        else:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    async def delete_me_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /delete_me command"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        
        keyboard = [
            [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data=f"delete_confirm_{user_id}")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="delete_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
            "‚Ä¢ –í—Å–µ –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–π\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            reply_markup=reply_markup
        )
    
    async def pause_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /pause command"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        self.db.update_user_paused(user_id, True)
        await self.scheduler.stop_user_schedule(user_id)
        
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    
    async def resume_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /resume command"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        user_id = update.effective_user.id
        self.db.update_user_paused(user_id, False)
        await self.scheduler.start_user_schedule(user_id)
        
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /stats command"""
        if not self._check_rate_limit(update.effective_user.id):
            return
            
        stats = self.db.get_global_stats()
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ EmoJournal:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_entries']}\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_weekly']}"
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard callbacks"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data.startswith("respond_"):
            await self._start_emotion_flow(query, user_id)
        elif data.startswith("snooze_"):
            await self._snooze_ping(query, user_id)
        elif data.startswith("skip_"):
            await self._skip_today(query, user_id)
        elif data.startswith("emotion_"):
            await self._handle_emotion_selection(query, data)
        elif data.startswith("delete_confirm_"):
            await self._confirm_delete(query, user_id)
        elif data == "delete_cancel":
            await query.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        elif data == "show_emotions":
            await self._show_emotion_categories(query)
        elif data.startswith("category_"):
            await self._show_category_emotions(query, data)
        elif data == "other_emotion":
            await self._request_custom_emotion(query)
        elif data == "skip_cause":
            await self._skip_cause_and_finish(query, user_id)
    
    async def _start_emotion_flow(self, query, user_id: int):
        """Start emotion recording flow"""
        self._clear_user_state(user_id)
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∏–¥–µ–∏ —ç–º–æ—Ü–∏–π", callback_data="show_emotions")],
            [InlineKeyboardButton("–î—Ä—É–≥–æ–µ, –Ω–∞–ø–∏—à—É —Å–∞–º(–∞)", callback_data="other_emotion")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            self.texts.EMOTION_QUESTION,
            reply_markup=reply_markup
        )
    
    async def _show_emotion_categories(self, query):
        """Show emotion categories based on Plutchik's wheel and NVC"""
        keyboard = []
        categories = [
            ("–†–∞–¥–æ—Å—Ç—å/–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "category_joy"),
            ("–ò–Ω—Ç–µ—Ä–µ—Å/–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", "category_interest"),
            ("–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ/–£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "category_calm"),
            ("–¢—Ä–µ–≤–æ–≥–∞/–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ", "category_anxiety"),
            ("–ì—Ä—É—Å—Ç—å/–ü–µ—á–∞–ª—å", "category_sadness"),
            ("–ó–ª–æ—Å—Ç—å/–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "category_anger"),
            ("–°—Ç—ã–¥/–í–∏–Ω–∞", "category_shame"),
            ("–£—Å—Ç–∞–ª–æ—Å—Ç—å/–ò—Å—Ç–æ—â–µ–Ω–∏–µ", "category_fatigue"),
            ("–î—Ä—É–≥–æ–µ", "other_emotion")
        ]
        
        for name, callback in categories:
            keyboard.append([InlineKeyboardButton(name, callback_data=callback)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —ç–º–æ—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ:",
            reply_markup=reply_markup
        )
    
    async def _show_category_emotions(self, query, data: str):
        """Show specific emotions in category"""
        category = data.replace("category_", "")
        
        emotions_map = {
            "joy": ["—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ", "–≤–æ—Å—Ç–æ—Ä–≥", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"],
            "interest": ["–∏–Ω—Ç–µ—Ä–µ—Å", "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", "—É–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å", "–≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ", "–ø—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ"],
            "calm": ["—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å", "–±–µ–∑–º—è—Ç–µ–∂–Ω–æ—Å—Ç—å", "–ø—Ä–∏–Ω—è—Ç–∏–µ"],
            "anxiety": ["—Ç—Ä–µ–≤–æ–≥–∞", "–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ", "–Ω–µ—Ä–≤–æ–∑–Ω–æ—Å—Ç—å", "–≤–æ–ª–Ω–µ–Ω–∏–µ", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "—Å—Ç—Ä–∞—Ö"],
            "sadness": ["–≥—Ä—É—Å—Ç—å", "–ø–µ—á–∞–ª—å", "—Ç–æ—Å–∫–∞", "—É–Ω—ã–Ω–∏–µ", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ", "—Å–æ–∂–∞–ª–µ–Ω–∏–µ"],
            "anger": ["–∑–ª–æ—Å—Ç—å", "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "–≥–Ω–µ–≤", "–≤–æ–∑–º—É—â–µ–Ω–∏–µ", "–æ–±–∏–¥–∞", "—Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è"],
            "shame": ["—Å—Ç—ã–¥", "–≤–∏–Ω–∞", "—Å–º—É—â–µ–Ω–∏–µ", "–Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å", "—Å–æ–∂–∞–ª–µ–Ω–∏–µ", "—Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞"],
            "fatigue": ["—É—Å—Ç–∞–ª–æ—Å—Ç—å", "–∏—Å—Ç–æ—â–µ–Ω–∏–µ", "–≤—è–ª–æ—Å—Ç—å", "–∞–ø–∞—Ç–∏—è", "–±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ", "–≤—ã–≥–æ—Ä–∞–Ω–∏–µ"]
        }
        
        emotions = emotions_map.get(category, [])
        keyboard = []
        
        for emotion in emotions:
            keyboard.append([InlineKeyboardButton(emotion.title(), callback_data=f"emotion_{emotion}")])
        
        keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="show_emotions")])
        keyboard.append([InlineKeyboardButton("–î—Ä—É–≥–æ–µ, –Ω–∞–ø–∏—à—É —Å–∞–º(–∞)", callback_data="other_emotion")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —ç–º–æ—Ü–∏—é:",
            reply_markup=reply_markup
        )
    
    async def _handle_emotion_selection(self, query, data: str):
        """Handle specific emotion selection - now asks for cause"""
        emotion = data.replace("emotion_", "")
        user_id = query.from_user.id
        
        # Store emotion in user state for the next step
        self._set_user_state(user_id, 'waiting_for_cause', {'emotion': emotion})
        
        # Ask for cause/trigger
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_cause")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ú® –í—ã–±—Ä–∞–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion.title()}\n\n"
            f"{self.texts.CAUSE_QUESTION}",
            reply_markup=reply_markup
        )
    
    async def _request_custom_emotion(self, query):
        """Request custom emotion input"""
        user_id = query.from_user.id
        self._set_user_state(user_id, 'waiting_for_custom_emotion')
        
        await query.edit_message_text(
            "–û–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å.\n\n"
            "–ú–æ–∂–Ω–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —Ñ—Ä–∞–∑–æ–π ‚Äî –∫–∞–∫ —É–¥–æ–±–Ω–æ."
        )
    
    async def _skip_cause_and_finish(self, query, user_id: int):
        """Skip cause entry and finish emotion recording"""
        user_state = self._get_user_state(user_id)
        emotion = user_state.get('emotion', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # Save emotion without cause
        await self._save_emotion_entry(user_id, emotion, '')
        self._clear_user_state(user_id)
        
        await query.edit_message_text(
            f"‚ú® –°–ø–∞—Å–∏–±–æ!\n\n"
            f"–ó–∞–ø–∏—Å–∞–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion.title()}\n\n"
            f"–£–∂–µ —Å–∞–º —Ñ–∞–∫—Ç, —á—Ç–æ —Ç—ã —ç—Ç–æ –∑–∞–º–µ—Ç–∏–ª(–∞) –∏ –Ω–∞–∑–≤–∞–ª(–∞), ‚Äî —à–∞–≥ –∫ —è—Å–Ω–æ—Å—Ç–∏.\n\n"
            f"üí° –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –µ—â—ë –æ–¥–Ω—É —ç–º–æ—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π /note"
        )
    
    async def _snooze_ping(self, query, user_id: int):
        """Snooze notification for 15 minutes"""
        await query.edit_message_text("–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç ‚è∞")
        await self.scheduler.schedule_snooze(user_id, 15)
    
    async def _skip_today(self, query, user_id: int):
        """Skip today's remaining notifications"""
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ –ø–æ–±–µ—Å–ø–æ–∫–æ—é")
        await self.scheduler.skip_today(user_id)
    
    async def _confirm_delete(self, query, user_id: int):
        """Confirm user data deletion"""
        self.db.delete_user_data(user_id)
        await self.scheduler.stop_user_schedule(user_id)
        self._clear_user_state(user_id)
        
        await query.edit_message_text(
            "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ EmoJournal!\n"
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
        )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages (emotion/cause/note input)"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        user_state = self._get_user_state(user_id)
        
        if user_state.get('state') == 'waiting_for_custom_emotion':
            # User entered custom emotion, now ask for cause
            self._set_user_state(user_id, 'waiting_for_cause', {'emotion': text})
            
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_cause")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ú® –ó–∞–ø–∏—Å–∞–Ω–∞ —ç–º–æ—Ü–∏—è: {text.title()}\n\n"
                f"{self.texts.CAUSE_QUESTION}",
                reply_markup=reply_markup
            )
            
        elif user_state.get('state') == 'waiting_for_cause':
            # User entered cause/trigger, save complete entry
            emotion = user_state.get('emotion', text)
            cause = text
            
            await self._save_emotion_entry(user_id, emotion, cause)
            self._clear_user_state(user_id)
            
            await update.message.reply_text(
                f"‚ú® –°–ø–∞—Å–∏–±–æ!\n\n"
                f"–≠–º–æ—Ü–∏—è: {emotion.title()}\n"
                f"–¢—Ä–∏–≥–≥–µ—Ä: {cause}\n\n"
                f"–£–∂–µ —Å–∞–º —Ñ–∞–∫—Ç, —á—Ç–æ —Ç—ã —ç—Ç–æ –∑–∞–º–µ—Ç–∏–ª(–∞) –∏ –Ω–∞–∑–≤–∞–ª(–∞), ‚Äî —à–∞–≥ –∫ —è—Å–Ω–æ—Å—Ç–∏.\n\n"
                f"üí° –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –µ—â—ë –æ–¥–Ω—É —ç–º–æ—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π /note"
            )
            
        else:
            # Regular text message - treat as emotion
            self._set_user_state(user_id, 'waiting_for_cause', {'emotion': text})
            
            keyboard = [
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_cause")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ú® –ó–∞–ø–∏—Å–∞–Ω–∞ —ç–º–æ—Ü–∏—è: {text.title()}\n\n"
                f"{self.texts.CAUSE_QUESTION}",
                reply_markup=reply_markup
            )
    
    async def _save_emotion_entry(self, user_id: int, emotion_text: str, cause_text: str = ''):
        """Save emotion entry to database"""
        try:
            # Ensure user exists (auto-create if needed)
            user = self.db.get_user(user_id)
            if not user:
                user = self.db.create_user(user_id, user_id)  # Use user_id as chat_id
                await self.scheduler.start_user_schedule(user_id)
                logger.info(f"Auto-created user {user_id}")
            
            entry_data = {
                'emotions': [emotion_text.lower()],
                'cause': cause_text,
                'note': f"{emotion_text}" + (f" (–ø—Ä–∏—á–∏–Ω–∞: {cause_text})" if cause_text else ""),
                'valence': None,
                'arousal': None
            }
            
            self.db.create_entry(
                user_id=user_id,
                emotions=json.dumps(entry_data['emotions']),
                cause=entry_data['cause'],
                note=entry_data['note'],
                valence=entry_data['valence'],
                arousal=entry_data['arousal']
            )
            
        except Exception as e:
            logger.error(f"Failed to save emotion entry: {e}")
    
    def create_application(self):
        """Create and configure telegram application"""
        application = Application.builder().token(self.bot_token).build()
        
        # Command handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("note", self.note_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("timezone", self.timezone_command))
        application.add_handler(CommandHandler("summary", self.summary_command))
        application.add_handler(CommandHandler("export", self.export_command))
        application.add_handler(CommandHandler("delete_me", self.delete_me_command))
        application.add_handler(CommandHandler("pause", self.pause_command))
        application.add_handler(CommandHandler("resume", self.resume_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        
        # Callback and message handlers
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        return application
    
    async def run_webhook(self):
        """Run bot in webhook mode for Render"""
        application = self.create_application()
        
        # Start scheduler
        await self.scheduler.start()
        
        # Initialize application
        await application.initialize()
        await application.start()
        
        # Set webhook
        webhook_url = self.webhook_url
        if not webhook_url.endswith('/webhook'):
            webhook_url += '/webhook'
        
        await application.bot.set_webhook(
            url=webhook_url,
            allowed_updates=['message', 'callback_query']
        )
        
        # Create aiohttp web server
        from aiohttp import web
        from aiohttp.web_request import Request
        
        async def webhook_handler(request: Request):
            """Handle incoming webhook requests"""
            try:
                body = await request.text()
                update_data = json.loads(body)
                update = Update.de_json(update_data, application.bot)
                
                # Process update
                await application.process_update(update)
                
                return web.Response(status=200)
                
            except Exception as e:
                logger.error(f"Webhook error: {e}")
                return web.Response(status=500)
        
        async def health_handler(request: Request):
            """Health check endpoint"""
            return web.Response(text="OK", status=200)
        
        async def root_handler(request: Request):
            """Root page handler"""
            return web.Response(text="EmoJournal Bot is running", status=200)
        
        # Create web application
        app = web.Application()
        app.router.add_post('/webhook', webhook_handler)
        app.router.add_get('/health', health_handler)
        app.router.add_get('/', root_handler)
        
        # Start web server
        from aiohttp import web
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, '0.0.0.0', self.port)
        await site.start()
        
        logger.info(f"Bot started in webhook mode on port {self.port}")
        logger.info(f"Webhook URL: {webhook_url}")
        
        return application, runner


async def main():
    """Main function"""
    bot = EmoJournalBot()
    
    try:
        application, runner = await bot.run_webhook()
        
        # Keep running indefinitely
        await asyncio.Event().wait()
        
    except Exception as e:  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ 'as'
        logger.error(f"Failed to start bot: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
