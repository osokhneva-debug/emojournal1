#!/usr/bin/env python3
"""
Security and validation for EmoJournal Bot
Input validation and sanitization
"""

import re
from typing import Optional
import logging

logger = logging.getLogger(__name__)

class InputValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    MAX_TEXT_LENGTH = 1000
    MAX_EMOTION_LENGTH = 100
    MAX_CAUSE_LENGTH = 500
    MAX_NOTE_LENGTH = 300
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    SUSPICIOUS_PATTERNS = [
        r'<script',
        r'javascript:',
        r'data:text/html',
        r'vbscript:',
        r'onload=',
        r'onerror=',
        r'eval\(',
        r'document\.cookie',
    ]
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    FORBIDDEN_CHARS = ['<', '>', '{', '}', '[', ']', '\\', '|']
    
    @classmethod
    def validate_text_input(cls, text: str, field_name: str = "text") -> Optional[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not text or not isinstance(text, str):
            return None
            
        text = text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        if not text:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        max_length = cls._get_max_length(field_name)
        if len(text) > max_length:
            logger.warning(f"Text too long for {field_name}: {len(text)} chars")
            text = text[:max_length]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        text_lower = text.lower()
        for pattern in cls.SUSPICIOUS_PATTERNS:
            if re.search(pattern, text_lower):
                logger.warning(f"Suspicious content detected in {field_name}")
                return None
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        for char in cls.FORBIDDEN_CHARS:
            if char in text:
                text = text.replace(char, '')
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text if text else None
    
    @classmethod
    def validate_emotion(cls, emotion: str) -> Optional[str]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —ç–º–æ—Ü–∏–π"""
        validated = cls.validate_text_input(emotion, "emotion")
        if not validated:
            return None
        
        # –≠–º–æ—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏
        if len(validated) > cls.MAX_EMOTION_LENGTH:
            return None
        
        # –≠–º–æ—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã
        if re.search(r'\d', validated):
            return None
        
        return validated.lower()
    
    @classmethod
    def validate_cause(cls, cause: str) -> Optional[str]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏—á–∏–Ω"""
        return cls.validate_text_input(cause, "cause")
    
    @classmethod
    def validate_note(cls, note: str) -> Optional[str]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∑–∞–º–µ—Ç–æ–∫"""
        return cls.validate_text_input(note, "note")
    
    @classmethod
    def _get_max_length(cls, field_name: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –ø–æ–ª—è"""
        limits = {
            'emotion': cls.MAX_EMOTION_LENGTH,
            'cause': cls.MAX_CAUSE_LENGTH,
            'note': cls.MAX_NOTE_LENGTH,
        }
        return limits.get(field_name, cls.MAX_TEXT_LENGTH)
    
    @classmethod
    def is_spam_like(cls, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–ø–æ–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        if not text:
            return False
        
        # –ú–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
        if re.search(r'(.)\1{10,}', text):
            return True
        
        # –ú–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        if len(text) > 10 and sum(1 for c in text if c.isupper()) / len(text) > 0.7:
            return True
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
        emoji_count = len(re.findall(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]', text))
        if emoji_count > 5:
            return True
        
        return False


class ContentFilter:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã—Ö —Å–ª–æ–≤ (–±–∞–∑–æ–≤—ã–π)
    INAPPROPRIATE_WORDS = [
        'spam', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞–º', '–∫—É–ø–ª—é', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫',
        'bitcoin', 'cryptocurrency', 'casino', '–∫–∞–∑–∏–Ω–æ'
    ]
    
    @classmethod
    def is_inappropriate(cls, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        if not text:
            return False
        
        text_lower = text.lower()
        
        for word in cls.INAPPROPRIATE_WORDS:
            if word in text_lower:
                return True
        
        return False
    
    @classmethod
    def clean_text(cls, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        text = re.sub(r'\s+', ' ', text)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
        text = re.sub(r'[.]{3,}', '...', text)
        text = re.sub(r'[!]{2,}', '!', text)
        text = re.sub(r'[?]{2,}', '?', text)
        
        return text


def sanitize_user_input(text: str, input_type: str = "general") -> Optional[str]:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not text:
        return None
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if input_type == "emotion":
        result = InputValidator.validate_emotion(text)
    elif input_type == "cause":
        result = InputValidator.validate_cause(text)
    elif input_type == "note":
        result = InputValidator.validate_note(text)
    else:
        result = InputValidator.validate_text_input(text)
    
    if not result:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if InputValidator.is_spam_like(result):
        logger.warning(f"Spam-like content detected: {input_type}")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if ContentFilter.is_inappropriate(result):
        logger.warning(f"Inappropriate content detected: {input_type}")
        return None
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    result = ContentFilter.clean_text(result)
    
    return result if result else None


if __name__ == "__main__":
    # –¢–µ—Å—Ç—ã
    test_cases = [
        ("—Ä–∞–¥–æ—Å—Ç—å", "emotion", "—Ä–∞–¥–æ—Å—Ç—å"),
        ("–û–ß–ï–ù–¨ –î–û–õ–ì–ò–ô –¢–ï–ö–°–¢" * 50, "emotion", None),
        ("<script>alert('hack')</script>", "general", None),
        ("—Ä–∞–±–æ—Ç–∞ —Å—Ç—Ä–µ—Å—Å", "cause", "—Ä–∞–±–æ—Ç–∞ —Å—Ç—Ä–µ—Å—Å"),
        ("!!!!!!!!!", "general", "!"),
        ("üòÄüòÄüòÄüòÄüòÄüòÄüòÄ", "general", None),  # –ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
    ]
    
    for text, input_type, expected in test_cases:
        result = sanitize_user_input(text, input_type)
        status = "‚úì" if result == expected else "‚úó"
        print(f"{status} {input_type}: '{text}' -> '{result}'")
